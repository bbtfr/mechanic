<script type="text/javascript">
  (function() {
    // Initialize DataTable
    var dataTable = window.dataTable = $("#mechanics:not(.dataTable)").DataTable({
      order: [], // Do not sort by default
      pagingType: 'full_numbers',
      columnDefs: [{
        orderable: false,
        targets: 0
      }, {
        visible: false,
        targets: 1
      }],
      select: 'api',
      language: {
        select: {
          rows: {
            0: "请选择技师",
            1: "你选中了一个技师"
          }
        }
      }
    });

    var skillColumn = dataTable.column(1);
    $("#mechanics_skills").prependTo($("#mechanics_filter"));

    // Initialize Event Callbacks
    var mechanics = <%= raw @mechanics.reduce({}) { |ret, mechanic|
        json = mechanic.user.as_json(only: %w(lat lng address))
        json.merge!(popover: render(partial: "shared/orders/mechanic_popover", locals: { mechanic: mechanic }))
        ret[mechanic.id] = json
        ret
      }.to_json %>;

    function getMapListItem(mechanicId) {
      return $("#map_list .glyphicon[data-mechanic-id=" + mechanicId + "]").closest(".item");
    }

    function getMechanicIdFromNode(item) {
      return $(item).find(".glyphicon").data("mechanic-id");
    }

    var $items = $("#map_list .item");
    var $mechanicId = $("#order_mechanic_id");
    function selectMechanic(mechanicId) {
      if (selectMechanic.mechanicId == mechanicId) return;
      selectMechanic.mechanicId = mechanicId;

      $mechanicId.val(mechanicId);

      // DataTable
      dataTable.rows({ selected: true }).select(false);
      var selectedRowIndex = dataTable.row(function(index, data) {
        return $(data[0]).data("mechanic-id") == mechanicId;
      }).select().index();

      // DataTable display right page
      var pageInfo = dataTable.page.info();
      var rowPosition = dataTable.rows()[0].indexOf(selectedRowIndex);
      if (rowPosition >= 0 && rowPosition < pageInfo.start || rowPosition >= pageInfo.end) {
        var pageToDisplay = Math.floor(rowPosition / dataTable.page.len());
        dataTable.page(pageToDisplay).draw("page");
      }

      // Map
      $items.filter(".selected").removeClass("selected");
      getMapListItem(mechanicId).addClass("selected");

      if (window.showMechanicInfo) window.showMechanicInfo(mechanicId, true);
    }

    $("#mechanics").on("click", "td:not(:last-child)", function(event) {
      selectMechanic(getMechanicIdFromNode($(event.currentTarget).parent()));
    });

    $("#map_list").on("click", ".item", function(event) {
      selectMechanic(getMechanicIdFromNode(event.currentTarget));
    });

    // Skill Select
    $(".mechanics_skills_select").on("change", function() {
      var value = $(this).val();
      $(".mechanics_skills_select").val(value);

      skillColumn.search(value ? $(this).find('option:selected').text() : "");
      dataTable.draw();

      // Show / Hide Map List Item & Marker if needed
      $items.hide();
      $.each(mechanics, function(id, mechanic) {
        if (mechanic.marker) mechanic.marker.setVisible(false);
      });
      var mechanicIds = dataTable.rows({ search: "applied" }).nodes().map(function(node) {
        var mechanicId = getMechanicIdFromNode(node);
        getMapListItem(mechanicId).show();
        var mechanic = mechanics[mechanicId];
        if (mechanic.marker) mechanic.marker.setVisible(true);
        return mechanicId;
      });

      // Show / Hide Map Popover if needed
      if (mechanicIds.indexOf(selectMechanic.mechanicId) < 0) {
        showMechanicInfo();
      } else {
        showMechanicInfo(selectMechanic.mechanicId);
      }
    });

    selectMechanic(<%= raw @order.mechanic_id.to_json %>);

    // Initialize Map
    window.initMap = function() {
      // Custom InfoWindow
      var InfoWindow = function(opts) {
        qq.maps.Overlay.call(this, opts);
      };
      InfoWindow.prototype = new qq.maps.Overlay();
      InfoWindow.prototype.construct = function() {
        this.dom = document.createElement("div");
        this.dom.className = "map-info-window";
        this.getPanes().floatPane.appendChild(this.dom);
        if (this.get("onCreate")) this.get("onCreate")();
      };
      InfoWindow.prototype.setContent = function(content) {
        this.dom.innerHTML = content;
      };
      InfoWindow.prototype.setPosition = function(position) {
        this.set("position", position);
      };
      InfoWindow.prototype.draw = function() {
        var position = this.get("position");
        if (position) {
          var pixel = this.getProjection().fromLatLngToDivPixel(position);
          this.dom.style.left = pixel.getX() + "px";
          this.dom.style.top = pixel.getY() + "px";
        }
      };
      InfoWindow.prototype.destroy = function() {
        this.dom.parentNode.removeChild(this.dom);
      };

      // Initialze Map
      var map = new qq.maps.Map($("#map")[0], {
        zoom: 12
      });
      var info = new InfoWindow({
        map: map,
        onCreate: function() {
          showMechanicInfo(selectMechanic.mechanicId);
        }
      });

      var imageBlue = <%= raw image_path("map-marker-blue.png").to_json %>,
          imageRed = <%= raw image_path("map-marker-red.png").to_json %>,
          imageGreen = <%= raw image_path("map-marker-green.png").to_json %>,
          size = new qq.maps.Size(32, 32),
          origin = new qq.maps.Point(0, 0),
          anchor = new qq.maps.Point(16, 32),
          scaleSize = new qq.maps.Size(32, 32),
          iconBlue = new qq.maps.MarkerImage(imageBlue, size, origin, anchor, scaleSize),
          iconRed = new qq.maps.MarkerImage(imageRed, size, origin, anchor, scaleSize),
          iconGreen = new qq.maps.MarkerImage(imageGreen, size, origin, anchor, scaleSize);

      function showInfo(record, center) {
        if (showInfo.record === record) return;
        showInfo.record = record;

        if (record) {
          info.setPosition(record.position);
          info.setContent(record.popover);
          if (center) map.panTo(record.position);
        } else {
          info.setContent("");
        }
        info.draw();

      }

      var showMechanicInfo = window.showMechanicInfo = function(mechanicId, center) {
        var mechanic = mechanics[mechanicId];
        showInfo(mechanic, center);
      }

      function rawSetMarker(record) {
        var marker = new qq.maps.Marker({
          icon: record.icon,
          map: map,
          position: record.position,
          zIndex: record.zIndex || 100
        });

        if (record.onClick) {
          qq.maps.event.addListener(marker, "click", record.onClick);
        }

        if (record.center) map.setCenter(record.position);
        record.marker = marker;
        return marker;
      }

      function setMarker(record) {
        if (!record.lat || !record.lng) {
          var geocoder = new qq.maps.Geocoder({
            complete: function(result) {
              record.position = result.detail.location;
              rawSetMarker(record);
              if (record.onComplete) record.onComplete();
            },
            error: function(error) {
              if (record.onComplete) record.onComplete();
            }
          });
          geocoder.getLocation(record.address);
        } else {
          record.position = new qq.maps.LatLng(record.lat, record.lng);
          rawSetMarker(record);
          if (record.onComplete) record.onComplete();
        }
      }

      // Use counter to make sure all requests are finished
      var finishedRequestsCount = 0;
      var requestsCount = $.map(mechanics, function(id, mechanic) { return id; }).length + 1;
      $.each(mechanics, function(id, mechanic) {
        setMarker($.extend(mechanic, {
          icon: iconBlue,
          onClick: function() {
            showInfo(mechanic);
            selectMechanic(id);
          },
          onComplete: onCompleteCallback
        }));
      });

      var order = <%= raw @order.to_json(only: %w(lat lng address)) %>;
      var marker = setMarker($.extend(order, {
        center: true,
        icon: iconRed,
        onClick: function() {
          showInfo(order);
        },
        onComplete: onCompleteCallback,
        popover: <%= raw render(partial: "shared/orders/order_popover", locals: { order: @order }).to_json %>,
        zIndex: 101
      }));

      function onCompleteCallback() {
        // If all requests are finished
        finishedRequestsCount = finishedRequestsCount + 1;
        if (requestsCount !== finishedRequestsCount) return;
        if (!order.position) return;

        $.each(mechanics, function(id, mechanic) {
          if (mechanic.position) {
            var distance = qq.maps.geometry.spherical.computeDistanceBetween(order.position, mechanic.position);
            mechanic.distance = distance;

            // Display distance text in Map List
            var distanceText;
            if (!distance) {
              distanceText = "【无法定位】"
            } else if (distance < 1000) {
              distanceText = "【" + parseInt(distance) + "米】";
            } else {
              distanceText = "【" + parseInt(distance / 1000) + "千米】";
            }

            getMapListItem(id).find(".distance").text(distanceText);
          }
        });

        // Sort Map List Item
        var $mapList = $("#map_list");
        var $items = $mapList.children(".item");
        $items.sort(function(aNode, bNode) {
          var aMechanicId = getMechanicIdFromNode(aNode);
          var bMechanicId = getMechanicIdFromNode(bNode);
          var aDistance = mechanics[aMechanicId].distance;
          var bDistance = mechanics[bMechanicId].distance;
          if (!aDistance) return 1;
          if (!bDistance) return -1;
          if (aDistance > bDistance) return 1;
          if (aDistance < bDistance) return -1;
          return 0;
        });

        $items.detach().appendTo($mapList);
      }

    }

  })();
</script>
<script charset="utf-8" src="http://map.qq.com/api/js?v=2.exp&amp;callback=initMap&amp;libraries=drawing,geometry"></script>
